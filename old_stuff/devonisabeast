#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTMotor,  HTMotor)
#pragma config(Hubs,  S2, HTServo,  none,     none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     touchSensor,    sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     lift,          tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C1_2,     spinner,       tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_1,     bl,            tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_2,     fl,            tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_1,     fr,            tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_2,     br,            tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C4_1,     drawer,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_2,     motorK,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S2_C1_1,    servo1,               tServoStandard)
#pragma config(Servo,  srvo_S2_C1_2,    servo2,               tServoStandard)
#pragma config(Servo,  srvo_S2_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S2_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"  //Include file to "handle" the Bluetooth messages.
#include "ButtonsDefs.h"


void initializeRobot()
{
	bFloatDuringInactiveMotorPWM = false;
	return;
}


task main()
{
	initializeRobot();

	waitForStart();   // wait for start of tele-op phase

	int x, y;
	float speed = 0.75;

	while (true)
	{
		getJoystickSettings(joystick);



		if(joystick.joy1_Buttons == button_right_trigger){

			motor[fr] = 100*speed;
			motor[fl] = 100*speed;
			motor[bl] = -100*speed ;
			motor[br] = -100*speed;
		}

		else if(joystick.joy1_Buttons == button_left_trigger){

			motor[fr] = -100*speed;
			motor[fl] = -100*speed;
			motor[bl] = 100*speed ;
			motor[br] = 100*speed;
		}
		else{
			x = joystick.joy1_x1 / 128.0 * 100 * speed;
			y = joystick.joy1_y1 / 128.0 * 100 * speed;

			motor[fr] = x - y;
			motor[fl] = -x + y;
			motor[bl] = -x - y;
			motor[br] = x + y;
		}

		if(joystick.joy2_Buttons == button_right_button){
			motor[lift] = -100;
		}

		else if(joystick.joy2_Buttons == button_left_button){
			motor[lift] = 100;
		}
		else{
			motor[lift] = 0;
		}

		if(joystick.joy2_Buttons == button_right_trigger){
			motor[drawer] = 100;
		}

		else if(joystick.joy2_Buttons == button_left_trigger){
			motor[drawer] = -100;
		}

		else{
			motor[drawer] = 0;
		}

		if(joystick.joy1_Buttons == button_left_button){
			speed = 0.25;
		}
		else if(joystick.joy1_Buttons == button_right_button){
			speed = 1.0;
		}
		else{
			speed = 0.75;
		}
		if(joystick.joy2_Buttons == button_b){
			motor[spinner] = 100;

		}
		else if(joystick.joy2_Buttons == button_x){

			motor[spinner] = -100;
		}
		else{
			motor[spinner] = 0;
		}

		if(joystick.joy1_Buttons == button_y){
			servo[servo1] = servoValue[servo1] +1;
			servo[servo2] = servoValue[servo2] -1;
		}
		if(joystick.joy1_Buttons == button_a){
				servo[servo1] = servoValue[servo1] -1;
			servo[servo2] = servoValue[servo2] +1;
		}

	}
}
